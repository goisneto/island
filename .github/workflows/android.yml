name: Android CI

on:
  workflow_call:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  app-name: Island

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Find Grandle Directories
      shell: bash {0}
      run: |
        find $(pwd) ~/ -type f -name 'gradlew' -exec bash -c 'dir=$(dirname $0); [ -f "${dir}/gradle.properties" ] && [ -f "${dir}/build.gradle" ] && [ -f "${dir}/settings.gradle" ] && echo $dir || false' {} \; -quit | ( xargs -r -I@ echo 'GRANDLE_WORK_DIR=@' >> $GITHUB_ENV )
        . $GITHUB_ENV
        if [[ ! -n "${GRANDLE_WORK_DIR}" ]]; then
          echo GRANDLE_WORK_DIR=/not-found >> $GITHUB_ENV
          echo GRANDLE_APP_DIR=/not-found >> $GITHUB_ENV
        else
          find ${GRANDLE_WORK_DIR} -mindepth 2 -type f -name 'build.gradle' -print -quit | ( xargs -r -I@ bash -c 'echo "GRANDLE_APP_DIR=$(dirname @)"' >> $GITHUB_ENV )
          . $GITHUB_ENV
          if [[ ! -n "${GRANDLE_APP_DIR}" ]]; then
            echo GRANDLE_APP_DIR=/not-found >> $GITHUB_ENV
          fi
        fi
        . $GITHUB_ENV
        echo GRANDLE_WORK_DIR=${GRANDLE_WORK_DIR}
        echo GRANDLE_APP_DIR=${GRANDLE_APP_DIR}

    - name: Clone git oasisfeng/deagle dependency
      shell: bash {0}
      run: |
        cd .. && git clone https://github.com/oasisfeng/deagle.git && cd -

    - name: Update Grandle JVM Memory
      shell: bash {0}
      run: |
        free -m | head -n-1 | tail -n-1 | xargs -r | cut -d' ' -f2 | xargs bash -c 'echo MEMTOTAL=$0' >> $GITHUB_ENV
        . $GITHUB_ENV
        MEMPERM=$(( ${MEMTOTAL} / $( nproc --all ) ))
        echo "MEMPERM="'"'"${MEMPERM}"'"' >> $GITHUB_ENV
        . $GITHUB_ENV
        sed -i "s/-Xmx[0-9]*(g|m|k)/-Xmx${MEMTOTAL}m/g" ${{ env.GRANDLE_WORK_DIR }}/gradle.properties
        sed -i "s/-XX:MaxPermSize=[0-9]*(g|m|k)/-XX:MaxPermSize=${MEMPERM}m/g" ${{ env.GRANDLE_WORK_DIR }}/gradle.properties
        echo "./gradle.properties updated:"
        grep 'org.gradle.jvmargs=' ${{ env.GRANDLE_WORK_DIR }}/gradle.properties       

    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle       

    - name: Setup NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25b
        local-cache: true

    - name: Grant execute permission for gradlew
      run: |
        cd "${{ env.GRANDLE_WORK_DIR }}"
        chmod +x gradlew      

    - name: Perform prebuild executions
      shell: bash {0}
      run: |
        . $GITHUB_ENV
        if [[ ! -x "${GRANDLE_WORK_DIR}/pre-build.sh" ]] &&  [[ ! -x "${GRANDLE_APP_DIR}/pre-build.sh" ]]; then
                echo "${GRANDLE_WORK_DIR}/pre-build.sh and/or ${GRANDLE_APP_DIR}/pre-build.sh executable(s) not found..."
        else
                if [[ -x "${GRANDLE_WORK_DIR}/pre-build.sh" ]]; then
                        echo "Running ${GRANDLE_WORK_DIR}/pre-build.sh"
                        . "${GRANDLE_WORK_DIR}/pre-build.sh"
                        echo "Done ${GRANDLE_WORK_DIR}/pre-build.sh"
                fi
                if [[ -x "${GRANDLE_APP_DIR}/pre-build.sh" ]]; then
                        echo "Running ${GRANDLE_APP_DIR}/pre-build.sh"
                        . "${GRANDLE_APP_DIR}/pre-build.sh"
                        echo "Done ${GRANDLE_APP_DIR}/pre-build.sh"
                fi
        fi        

    - name: Build with Gradle
      shell: bash {0}
      run: |
        cd "${{ env.GRANDLE_WORK_DIR }}"
        ./gradlew clean
        rm -rf build
        ./gradlew --build-cache build -Pandroid.debug.obsoleteApi=true
        ./gradlew --build-cache assembleRelease -Pandroid.debug.obsoleteApi=true
        ./gradlew --build-cache assembleDebug -Pandroid.debug.obsoleteApi=true    

    - name: Find Apk
      shell: bash {0}
      run: |
        find ${{ env.GRANDLE_WORK_DIR }} -type d -name 'apk' | xargs -r -I@ find @ -type d -name 'debug' -print -quit | xargs -r -I@ find @ -type f -name '*.apk' | ( xargs -r -I@ echo 'DEBUGAPK=@' >> $GITHUB_ENV )
        find ${{ env.GRANDLE_WORK_DIR }} -type d -name 'apk' | xargs -r -I@ find @ -type d -name 'release' -print -quit | xargs -r -I@ find @ -type f -name '*.apk' | ( xargs -r -I@ echo 'RELEASEAPK=@' >> $GITHUB_ENV )
        . $GITHUB_ENV
        [[ ! -n "${DEBUGAPK}" ]] && echo DEBUGAPK=/not-found >> $GITHUB_ENV
        [[ ! -n "${RELEASEAPK}" ]] && echo RELEASEAPK=/not-found >> $GITHUB_ENV
        . $GITHUB_ENV
        echo DEBUGAPK=${DEBUGAPK}
        echo RELEASEAPK=${RELEASEAPK}       

    - name: Build Artifacts ${{ env.app-name }}-release.apk
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.app-name }}.apk RELEASE
        path: ${{ env.RELEASEAPK }}

    - name: Build Artifacts ${{ env.app-name }}-debug.apk
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.app-name }}.apk DEBUG
        path: ${{ env.DEBUGAPK }}

    - name: If Action has failed - Run Debug Server if DEBUGSRV enviroment exists
      if: ${{ failure() }}
      env:
            DEBUGSRV_ENV: ${{ secrets.DEBUGSRV_ENV }}
      shell: bash {0}
      run: |
        . $GITHUB_ENV
        export main_fd="/proc/${BASHPID}/fd"
        write-host () {
                "$@" >"$main_fd/1" 2>"$main_fd/2"
        }
        if [ -n "${DEBUGSRV_ENV}" ]; then
            DEBUGSRV_ENV=( "${DEBUGSRV_ENV[@]}" )
            DEBUGSRV_ENV_VARS="$(sed -r 's/(^| |\;|&|\|)(export )?("|'"'"')?(([^=]*)( |\;|&|\||=|$))/\n\4\n/g' <<< "${DEBUGSRV_ENV[@]}" | grep -E '^[^ =]*=' | cut -d'=' -f1 | xargs)"
            DEBUGSRV_ENV_VARS=( "${DEBUGSRV_ENV_VARS[@]}" )
            eval "${DEBUGSRV_ENV[@]}" &> /dev/null
            if [ -n "${DEBUGSRV_ENV_VARS[@]}" ]; then
                 write-host echo "DEBUGSRV_ENV_VARS=( ""${DEBUGSRV_ENV_VARS[@]}"" )"
                 eval "export ""${DEBUGSRV_ENV_VARS[@]}" &>/dev/null
            fi
        fi
        if [ -n "${DEBUGSRV}" ] && [ -f "${DEBUGSRV}" ]; then
            write-host echo "DEBUGSRV=${DEBUGSRV}"
            #. "${DEBUGSRV}" &>/dev/null
        fi
